var searchIndex = JSON.parse('{\
"lax":{"doc":"Linear Algebra eXtension (LAX)","t":[13,8,4,8,4,8,13,13,13,13,3,8,3,8,13,13,13,13,4,13,13,8,6,8,8,8,3,8,8,8,13,4,13,8,3,8,4,4,13,13,12,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,10,10,10,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,10,10,12,11,12,0,10,10,10,10,11,11,10,10,10,12,10,10,12,12,10,10,10,10,10,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,8,4,13,13,13,6,10,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,5,11,11,11,11,12,12,12,12],"n":["Calc","Cholesky_","Diag","Eig_","EigenVectorFlag","Eigh_","Frobenius","Full","Hermite","Infinity","LUFactorizedTridiagonal","Lapack","LeastSquaresOutput","LeastSquaresSvdDivideConquer_","Lower","No","NonUnit","None","NormType","Not","One","OperatorNorm_","Pivot","QR_","Rcond_","SVDDC_","SVDOutput","SVD_","Solve_","Solveh_","Some","Transpose","Transpose","Triangular_","Tridiagonal","Tridiagonal_","UPLO","UVTFlag","Unit","Upper","a","as_ptr","as_ptr","as_ptr","as_ptr","bk","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cholesky","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","d","dl","du","du2","eig","eigh","eigh_generalized","eq","eq","eq","eq","error","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","householder","index","index","index_mut","index_mut","into","into","into","into","into","into","into","into","into","into","inv","inv_cholesky","invh","ipiv","is_calc","l","layout","least_squares","least_squares_nrhs","lu","lu_tridiagonal","ne","ne","opnorm","q","qr","rank","rcond","rcond_tridiagonal","s","singular_values","solve","solve_cholesky","solve_triangular","solve_tridiagonal","solveh","svd","svddc","t","then","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transpose","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","u","vt","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","AsLapackResult","Error","InvalidShape","LapackComputationalFailure","LapackInvalidValue","Result","as_lapack_result","borrow","borrow_mut","fmt","fmt","from","into","to_string","try_from","try_into","type_id","vzip","return_code","return_code","C","F","MatrixLayout","borrow","borrow_mut","clone","clone_into","eq","fmt","from","into","is_empty","lda","len","ne","resized","same_order","size","square_transpose","t","to_owned","toggle_order","transpose","transpose_over","try_from","try_into","type_id","vzip","col","lda","lda","row"],"q":["laxlax::error","","","","","","","","","","","","","","","","","","lax::error::Error","","lax::layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","lax::layout::MatrixLayout","","",""],"d":["","","","Wraps <code>*geev</code> for general matrices","Flag for calculating eigenvectors or not","","","All <em>m</em> columns of <em>U</em> and all <em>n</em> rows of <em>V</em>ᵀ.","","","Represents the LU factorization of a tridiagonal matrix <code>A</code> …","Trait for primitive types which implements LAPACK …","Result of LeastSquares","Wraps <code>*gelsd</code>","","","","No columns of <em>U</em> or rows of <em>V</em>ᵀ.","","","","","","","","","Result of SVD","Wraps <code>*gesvd</code>","","","The first min(<em>m</em>,<em>n</em>) columns of <em>U</em> and the first min(<em>m</em>,<em>n</em>) …","","","Wraps <code>*trtri</code> and <code>*trtrs</code>","Represents a tridiagonal matrix as 3 one-dimensional …","Wraps <code>*gttrf</code>, <code>*gtcon</code> and <code>*gttrs</code>","Upper/Lower specification for seveal usages","Specifies how many of the columns of <em>U</em> and rows of <em>V</em>ᵀ …","","","A tridiagonal matrix which consists of","To use Fortran LAPACK API in lapack-sys crate","To use Fortran LAPACK API in lapack-sys crate","To use Fortran LAPACK API in lapack-sys crate","To use Fortran LAPACK API in lapack-sys crate","Bunch-Kaufman: wrapper of <code>*sytrf</code> and <code>*hetrf</code>","","","","","","","","","","","","","","","","","","","","","Cholesky: wrapper of <code>*potrf</code>","","","","","","","","","","","","","","","","","(n) diagonal elements of matrix.","(n-1) sub-diagonal elements of matrix.","(n-1) super-diagonal elements of matrix.","(n-2) elements of the second super-diagonal of U.","Calculate Right eigenvalue","Wraps <code>*syev</code> for real and <code>*heev</code> for complex","Wraps <code>*sygv</code> for real and <code>*hegv</code> for complex","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Execute Householder reflection as the first step of …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Wrapper of <code>*potri</code>","Wrapper of <code>*sytri</code> and <code>*hetri</code>","The pivot indices that define the permutation matrix <code>P</code>.","","layout of raw matrix","Memory layout of matrices","","","Computes the LU factorization of a general <code>m x n</code> matrix <code>a</code> …","Computes the LU factorization of a tridiagonal <code>m x n</code> …","","","","Reconstruct Q-matrix from Householder-reflectors","Execute QR-decomposition at once","The rank of the input matrix A","Estimates the the reciprocal of the condition number of …","","diagonal values","singular values","","Wrapper of <code>*potrs</code>","","","Wrapper of <code>*sytrs</code> and <code>*hetrs</code>","Calculate singular value decomposition $ A = U \\\\Sigma V^T $","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unitary matrix for destination space","Unitary matrix for departure space","","","","","","","","","","","","","Strides of the array is not supported","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","In-place transpose of a square matrix by keeping F/C layout","Transpose without changing memory representation","","","Out-place transpose for general matrix","Out-place transpose for general matrix","","","","","","","",""],"i":[1,0,0,0,0,0,2,3,4,2,0,0,0,0,5,4,6,3,0,1,2,0,0,0,0,0,0,0,0,0,3,0,4,0,0,0,0,0,6,5,7,5,4,2,1,8,9,10,3,6,11,7,5,4,2,1,9,10,3,6,11,7,5,4,2,1,12,3,6,11,7,5,4,2,1,3,6,11,7,5,4,2,1,11,11,11,7,13,14,14,3,11,7,1,0,6,5,4,2,1,9,10,3,6,11,7,5,4,2,1,15,11,11,11,11,9,10,3,6,11,7,5,4,2,1,16,12,8,7,1,11,0,17,17,16,18,11,7,19,15,15,9,20,18,10,9,16,12,21,18,8,22,23,5,1,3,6,11,7,5,4,2,1,2,9,10,3,6,11,7,5,4,2,1,9,10,3,6,11,7,5,4,2,1,9,10,3,6,11,7,5,4,2,1,10,10,9,10,3,6,11,7,5,4,2,1,0,0,24,24,24,0,25,24,24,24,24,24,24,24,24,24,24,24,26,27,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,28,28,28,0,0,28,28,28,28,29,30,29,30],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["uplo",4]],["i8",0]],[[["transpose",4]],["i8",0]],[[["normtype",4]],["i8",0]],[[["eigenvectorflag",4]],["i8",0]],[[["matrixlayout",4],["uplo",4]],["result",6,[["pivot",6]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["matrixlayout",4],["uplo",4]],["result",6]],[[["uvtflag",4]],["uvtflag",4]],[[["diag",4]],["diag",4]],[[["tridiagonal",3,[["",26,[["clone",8],["scalar",8]]]]]],["tridiagonal",3,[["",26,[["clone",8],["scalar",8]]]]]],[[["lufactorizedtridiagonal",3,[["",26,[["clone",8],["scalar",8]]]]]],["lufactorizedtridiagonal",3,[["",26,[["clone",8],["scalar",8]]]]]],[[["uplo",4]],["uplo",4]],[[["transpose",4]],["transpose",4]],[[["normtype",4]],["normtype",4]],[[["eigenvectorflag",4]],["eigenvectorflag",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,null,null,null,[[["bool",0],["matrixlayout",4]],["result",6]],[[["bool",0],["matrixlayout",4],["uplo",4]],["result",6,[["vec",3]]]],[[["bool",0],["matrixlayout",4],["uplo",4]],["result",6,[["vec",3]]]],[[["uvtflag",4],["uvtflag",4]],["bool",0]],[[["tridiagonal",3,[["",26,[["partialeq",8],["scalar",8]]]]],["tridiagonal",3]],["bool",0]],[[["lufactorizedtridiagonal",3,[["",26,[["partialeq",8],["scalar",8]]]]],["lufactorizedtridiagonal",3]],["bool",0]],[[["eigenvectorflag",4],["eigenvectorflag",4]],["bool",0]],null,[[["diag",4],["formatter",3]],["result",6]],[[["uplo",4],["formatter",3]],["result",6]],[[["transpose",4],["formatter",3]],["result",6]],[[["normtype",4],["formatter",3]],["result",6]],[[["eigenvectorflag",4],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrixlayout",4]],["result",6,[["vec",3]]]],[[["tridiagonal",3,[["scalar",8]]]],["",0]],[[["tridiagonal",3,[["scalar",8]]]],["",0]],[[["tridiagonal",3,[["scalar",8]]]],["",0]],[[["tridiagonal",3,[["scalar",8]]]],["",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["matrixlayout",4],["pivot",6]],["result",6]],[[["matrixlayout",4],["uplo",4]],["result",6]],[[["matrixlayout",4],["uplo",4],["pivot",6]],["result",6]],null,[[["eigenvectorflag",4]],["bool",0]],null,null,[[["matrixlayout",4]],["result",6,[["leastsquaresoutput",3]]]],[[["matrixlayout",4],["matrixlayout",4]],["result",6,[["leastsquaresoutput",3]]]],[[["matrixlayout",4]],["result",6,[["pivot",6]]]],[[["tridiagonal",3]],["result",6,[["lufactorizedtridiagonal",3]]]],[[["tridiagonal",3,[["",26,[["partialeq",8],["scalar",8]]]]],["tridiagonal",3]],["bool",0]],[[["lufactorizedtridiagonal",3,[["",26,[["partialeq",8],["scalar",8]]]]],["lufactorizedtridiagonal",3]],["bool",0]],[[["normtype",4],["matrixlayout",4]]],[[["matrixlayout",4]],["result",6]],[[["matrixlayout",4]],["result",6,[["vec",3]]]],null,[[["matrixlayout",4]],["result",6]],[[["lufactorizedtridiagonal",3]],["result",6]],null,null,[[["matrixlayout",4],["transpose",4],["pivot",6]],["result",6]],[[["matrixlayout",4],["uplo",4]],["result",6]],[[["matrixlayout",4],["matrixlayout",4],["uplo",4],["diag",4]],["result",6]],[[["lufactorizedtridiagonal",3],["matrixlayout",4],["transpose",4]],["result",6]],[[["matrixlayout",4],["uplo",4],["pivot",6]],["result",6]],[[["matrixlayout",4],["bool",0],["bool",0]],["result",6,[["svdoutput",3]]]],[[["matrixlayout",4],["uvtflag",4]],["result",6,[["svdoutput",3]]]],[[["uplo",4]],["uplo",4]],[[["eigenvectorflag",4],["fnonce",8]],["option",4]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["normtype",4]],["normtype",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["matrixlayout",4]],["matrixlayout",4]],[[["",0],["",0]]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4],["formatter",3]],["result",6]],[[]],[[]],[[["matrixlayout",4]],["bool",0]],[[["matrixlayout",4]],["i32",0]],[[["matrixlayout",4]],["i32",0]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4],["i32",0],["i32",0]],["matrixlayout",4]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4]]],[[["matrixlayout",4]]],[[["matrixlayout",4]],["matrixlayout",4]],[[["",0]]],[[["matrixlayout",4]],["matrixlayout",4]],[[["matrixlayout",4]]],[[["matrixlayout",4]],["matrixlayout",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null],"p":[[4,"EigenVectorFlag"],[4,"NormType"],[4,"UVTFlag"],[4,"Transpose"],[4,"UPLO"],[4,"Diag"],[3,"LUFactorizedTridiagonal"],[8,"Solveh_"],[3,"LeastSquaresOutput"],[3,"SVDOutput"],[3,"Tridiagonal"],[8,"Cholesky_"],[8,"Eig_"],[8,"Eigh_"],[8,"QR_"],[8,"Solve_"],[8,"LeastSquaresSvdDivideConquer_"],[8,"Tridiagonal_"],[8,"OperatorNorm_"],[8,"Rcond_"],[8,"Triangular_"],[8,"SVD_"],[8,"SVDDC_"],[4,"Error"],[8,"AsLapackResult"],[13,"LapackInvalidValue"],[13,"LapackComputationalFailure"],[4,"MatrixLayout"],[13,"F"],[13,"C"]]},\
"ndarray_linalg":{"doc":"The <code>ndarray-linalg</code> crate provides linear algebra …","t":[13,13,3,4,3,0,14,14,14,14,14,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,8,3,8,8,8,8,8,8,8,8,13,16,16,16,16,16,16,8,4,13,11,11,10,10,10,10,11,10,11,12,10,10,11,11,11,11,10,11,10,11,10,11,10,11,11,10,11,11,11,11,11,12,11,5,5,5,5,5,5,5,8,3,8,11,10,11,11,11,11,10,11,11,11,11,8,16,16,8,16,10,10,16,16,16,16,16,16,8,8,8,16,8,8,8,16,16,8,8,10,10,10,10,10,10,10,10,13,13,4,13,13,13,6,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,5,5,5,5,5,5,5,5,5,16,8,10,13,4,2,6,13,16,13,6,2,2,8,6,6,13,4,13,10,0,2,2,11,11,11,11,11,11,10,11,10,10,10,11,11,11,11,10,0,2,11,11,11,11,11,11,10,0,2,5,11,11,10,11,11,11,11,11,11,11,11,12,12,3,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,5,11,11,11,5,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,8,8,13,16,13,4,10,10,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,12,12,12,12,3,8,8,8,11,11,11,11,11,11,11,10,10,10,12,12,12,12,11,11,11,11,11,13,13,4,13,13,13,3,4,3,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,8,4,16,13,11,11,11,11,11,10,10,10,5,11,11,11,11,16,8,11,11,11,11,11,11,13,13,4,13,8,16,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,13,16,16,16,8,8,8,8,8,16,16,16,16,16,4,13,10,10,10,10,10,8,8,8,8,13,8,8,3,13,16,16,6,8,8,8,4,13,11,11,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,10,11,10,11,10,11,10,11,10,11,10,11,11,11,10,11,11,10,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,3,8,8,16,16,8,8,8,8,13,16,16,6,8,4,13,12,11,11,11,11,11,11,11,10,11,10,11,10,10,11,11,11,11,11,10,11,10,11,12,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,8,8,8,16,16,16,16,16,16,16,16,16,10,10,10,13,13,8,8,8,16,16,16,13,16,16,16,4,16,16,16,11,11,11,11,11,11,11,10,10,10,11,11,11,11,11,16,8,10,4,8,13,8,8,8,13,11,11,11,11,11,11,11,10,10,10,10,11,11,11,11,11,8,8,8,8,3,8,8,8,8,3,12,11,11,11,11,11,11,11,11,12,10,11,12,12,12,11,11,10,10,11,10,11,11,11,11,11,11,11,11,11,12,12,11,11,11,10,11,10,11,10,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,10,11,11,11,11,10,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,8,16,8,10,10,10,10,10,10,10,10,10,10,6,6,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10],"n":["Largest","Smallest","TruncatedEig","TruncatedOrder","TruncatedSvd","assert","assert_aclose","assert_close_l1","assert_close_l2","assert_close_max","assert_rclose","cholesky","constraints","convert","diagonal","eig","eigh","error","generate","inner","krylov","layout","least_squares","lobpcg","norm","operator","opnorm","qr","solve","solveh","svd","svddc","trace","triangular","tridiagonal","types","aclose","close_l1","close_l2","close_max","rclose","Cholesky","CholeskyFactorized","CholeskyInplace","CholeskyInto","DeterminantC","DeterminantCInto","FactorizeC","FactorizeCInto","InverseC","InverseCInto","Lower","Output","Output","Output","Output","Output","Output","SolveC","UPLO","Upper","borrow","borrow_mut","cholesky","cholesky_inplace","cholesky_into","detc","detc","detc_into","detc_into","factor","factorizec","factorizec_into","from","into","into_lower","into_upper","invc","invc","invc_into","invc_into","ln_detc","ln_detc","ln_detc_into","ln_detc_into","solvec","solvec_inplace","solvec_inplace","solvec_into","try_from","try_into","type_id","uplo","vzip","flatten","generalize","into_col","into_matrix","into_row","replicate","transpose_data","AsDiagonal","Diagonal","IntoDiagonal","apply_mut","as_diagonal","borrow","borrow_mut","from","into","into_diagonal","try_from","try_into","type_id","vzip","Eig","EigVal","EigVal","EigVals","EigVec","eig","eigvals","EigVal","EigVal","EigVal","EigVal","EigVal","EigVal","EigValsh","EigValshInplace","EigValshInto","EigVec","Eigh","EighInplace","EighInto","Output","Output","SymmetricSqrt","SymmetricSqrtInto","eigh","eigh_inplace","eigh_into","eigvalsh","eigvalsh_inplace","eigvalsh_into","ssqrt","ssqrt_into","InvalidStride","Lapack","LinalgError","MemoryNotCont","NotSquare","NotStandardShape","Result","Shape","borrow","borrow_mut","fmt","fmt","from","from","from","into","source","to_string","try_from","try_into","type_id","vzip","0","0","cols","cols","obj","rows","rows","s0","s1","conjugate","from_diag","hstack","random","random_hermite","random_hpd","random_regular","random_unitary","vstack","Elem","InnerProduct","inner","Added","AppendResult","Arnoldi","Coefficients","Dependent","Elem","Full","H","Householder","MGS","Orthogonalizer","Q","R","Skip","Strategy","Terminate","append","arnoldi","arnoldi_householder","arnoldi_mgs","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","coeff","coeff","decompose","dim","div_append","eq","fmt","from","from","get_q","householder","householder","into","into","into_coeff","is_dependent","is_empty","is_full","len","mgs","mgs","qr","residual_norm","to_owned","tolerance","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Arnoldi","arnoldi_householder","arnoldi_mgs","borrow","borrow_mut","complete","dim","from","into","into_iter","new","next","try_from","try_into","type_id","vzip","Householder","append","backward_reflection","borrow","borrow_mut","calc_reflector","clone","clone_into","coeff","decompose","dim","div_append","fmt","forward_reflection","from","get_q","householder","into","len","new","reflect","to_owned","tolerance","try_from","try_into","type_id","vzip","MGS","append","borrow","borrow_mut","clone","clone_into","coeff","decompose","dim","div_append","fmt","from","get_q","into","len","mgs","new","to_owned","tolerance","try_from","try_into","type_id","vzip","AllocatedArray","AllocatedArrayMut","C","Elem","F","MatrixLayout","as_allocated","as_allocated_mut","borrow","borrow_mut","clone","clone_into","ensure_square","eq","fmt","from","into","is_empty","layout","lda","len","ne","resized","same_order","size","square_layout","t","to_owned","toggle_order","try_from","try_into","type_id","vzip","col","lda","lda","row","LeastSquaresResult","LeastSquaresSvd","LeastSquaresSvdInPlace","LeastSquaresSvdInto","borrow","borrow_mut","clone","clone_into","fmt","from","into","least_squares","least_squares_in_place","least_squares_into","rank","residual_sum_of_squares","singular_values","solution","to_owned","try_from","try_into","type_id","vzip","Err","Largest","LobpcgResult","NoResult","Ok","Smallest","TruncatedEig","TruncatedOrder","TruncatedSvd","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","constraints","decompose","decompose","fmt","fmt","from","from","from","from","into","into","into","into","into_iter","lobpcg","maxiter","maxiter","new","new","orthogonal_to","precision","precision","precondition_with","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","1","1","2","2","3","Column","Norm","NormalizeAxis","Output","Row","borrow","borrow_mut","from","into","norm","norm_l1","norm_l2","norm_max","normalize","try_from","try_into","type_id","vzip","Elem","LinearOperator","apply","apply2","apply2_into","apply2_mut","apply_into","apply_mut","Frobenius","Infinity","NormType","One","OperationNorm","Output","as_ptr","borrow","borrow_mut","clone","clone_into","fmt","from","into","opnorm","opnorm_fro","opnorm_inf","opnorm_one","to_owned","transpose","try_from","try_into","type_id","vzip","Lower","Q","Q","Q","QR","QRInto","QRSquare","QRSquareInplace","QRSquareInto","R","R","R","R","R","UPLO","Upper","qr","qr_into","qr_square","qr_square_inplace","qr_square_into","Determinant","DeterminantInto","Factorize","FactorizeInto","Hermite","Inverse","InverseInto","LUFactorized","No","Output","Output","Pivot","ReciprocalConditionNum","ReciprocalConditionNumInto","Solve","Transpose","Transpose","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","det","det_into","factorize","factorize_into","fmt","from","from","into","into","inv","inv","inv_into","inv_into","rcond","rcond","rcond_into","rcond_into","sln_det","sln_det","sln_det_into","sln_det_into","solve","solve_h","solve_h_inplace","solve_h_inplace","solve_h_into","solve_inplace","solve_inplace","solve_into","solve_t","solve_t_inplace","solve_t_inplace","solve_t_into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","BKFactorized","DeterminantH","DeterminantHInto","Elem","Elem","FactorizeH","FactorizeHInto","InverseH","InverseHInto","Lower","Output","Output","Pivot","SolveH","UPLO","Upper","a","as_ptr","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deth","deth","deth_into","deth_into","factorizeh","factorizeh_into","fmt","from","from","into","into","invh","invh","invh_into","invh_into","ipiv","sln_deth","sln_deth","sln_deth_into","sln_deth_into","solveh","solveh_inplace","solveh_inplace","solveh_into","t","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","SVD","SVDInplace","SVDInto","Sigma","Sigma","Sigma","U","U","U","VT","VT","VT","svd","svd_inplace","svd_into","Full","None","SVDDC","SVDDCInplace","SVDDCInto","Sigma","Sigma","Sigma","Some","U","U","U","UVTFlag","VT","VT","VT","borrow","borrow_mut","clone","clone_into","eq","from","into","svddc","svddc_inplace","svddc_into","to_owned","try_from","try_into","type_id","vzip","Output","Trace","trace","Diag","IntoTriangular","NonUnit","SolveTriangular","SolveTriangularInplace","SolveTriangularInto","Unit","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_triangular","solve_triangular","solve_triangular_inplace","solve_triangular_into","to_owned","try_from","try_into","type_id","vzip","DeterminantTridiagonal","ExtractTridiagonal","FactorizeTridiagonal","FactorizeTridiagonalInto","LUFactorizedTridiagonal","ReciprocalConditionNumTridiagonal","ReciprocalConditionNumTridiagonalInto","SolveTridiagonal","SolveTridiagonalInplace","Tridiagonal","a","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","d","det_tridiagonal","det_tridiagonal","dl","du","du2","eq","eq","extract_tridiagonal","factorize_tridiagonal","factorize_tridiagonal","factorize_tridiagonal_into","factorize_tridiagonal_into","from","from","index","index","index_mut","index_mut","into","into","ipiv","l","ne","ne","opnorm","rcond_tridiagonal","rcond_tridiagonal","rcond_tridiagonal_into","rcond_tridiagonal_into","solve_h_tridiagonal","solve_h_tridiagonal","solve_h_tridiagonal","solve_h_tridiagonal","solve_h_tridiagonal","solve_h_tridiagonal_inplace","solve_h_tridiagonal_inplace","solve_h_tridiagonal_inplace","solve_h_tridiagonal_into","solve_h_tridiagonal_into","solve_h_tridiagonal_into","solve_h_tridiagonal_into","solve_h_tridiagonal_into","solve_t_tridiagonal","solve_t_tridiagonal","solve_t_tridiagonal","solve_t_tridiagonal","solve_t_tridiagonal","solve_t_tridiagonal_inplace","solve_t_tridiagonal_inplace","solve_t_tridiagonal_inplace","solve_t_tridiagonal_into","solve_t_tridiagonal_into","solve_t_tridiagonal_into","solve_t_tridiagonal_into","solve_t_tridiagonal_into","solve_tridiagonal","solve_tridiagonal","solve_tridiagonal","solve_tridiagonal","solve_tridiagonal","solve_tridiagonal_inplace","solve_tridiagonal_inplace","solve_tridiagonal_inplace","solve_tridiagonal_into","solve_tridiagonal_into","solve_tridiagonal_into","solve_tridiagonal_into","solve_tridiagonal_into","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Complex","Lapack","Real","Scalar","abs","acos","acosh","add_complex","add_real","as_c","asin","asinh","atan","atanh","c32","c64","complex","conj","cos","cosh","div_complex","div_real","exp","from_real","im","ln","mul_complex","mul_real","pow","powc","powf","powi","rand","re","real","sin","sinh","sqrt","square","sub_complex","sub_real","tan","tanh"],"q":["ndarray_linalg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::assert","","","","","ndarray_linalg::cholesky","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::convert","","","","","","","ndarray_linalg::diagonal","","","","","","","","","","","","","","ndarray_linalg::eig","","","","","","","ndarray_linalg::eigh","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::error","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::error::LinalgError","","","","","","","","","ndarray_linalg::generate","","","","","","","","","ndarray_linalg::inner","","","ndarray_linalg::krylov","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::krylov::AppendResult","","ndarray_linalg::krylov::arnoldi","","","","","","","","","","","","","","","","ndarray_linalg::krylov::householder","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::krylov::mgs","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::layout","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::layout::MatrixLayout","","","","ndarray_linalg::least_squares","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::lobpcg","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::lobpcg::LobpcgResult","","","","","","","","ndarray_linalg::norm","","","","","","","","","","","","","","","","","","ndarray_linalg::operator","","","","","","","","ndarray_linalg::opnorm","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::qr","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::solve","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::solveh","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::svd","","","","","","","","","","","","","","","ndarray_linalg::svddc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::trace","","","ndarray_linalg::triangular","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::tridiagonal","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ndarray_linalg::types","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","Truncated eigenproblem solver","Find largest or smallest eigenvalues","Truncated singular value decomposition","Assertions for array","","","","","","Cholesky decomposition of Hermitian (or real symmetric) …","","utilities for convert array","Vector as a Diagonal matrix","Eigenvalue decomposition for non-symmetric square matrices","Eigendecomposition for Hermitian matrices.","Define Errors","Generator functions for matrices","","Krylov subspace methods","Convert ndarray into LAPACK-compatible matrix format","Least Squares","","Norm of vectors","Linear operator algebra","Operator norm","QR decomposition","Solve systems of linear equations and invert matrices","Solve Hermitian (or real symmetric) linear problems and …","Singular-value decomposition (SVD)","Singular-value decomposition (SVD) by divide-and-conquer …","Trace calculation","Methods for triangular matrices","Vectors as a Tridiagonal matrix &amp; Methods for tridiagonal …","Basic types and their methods for linear algebra","check two values are close in terms of the absolute …","check two arrays are close in L1 norm","check two arrays are close in L2 norm","check two arrays are close in maximum norm","check two values are close in terms of the relative …","Cholesky decomposition of Hermitian (or real symmetric) …","Cholesky decomposition of Hermitian (or real symmetric) …","Cholesky decomposition of Hermitian (or real symmetric) …","Cholesky decomposition of Hermitian (or real symmetric) …","Determinant of Hermitian (or real symmetric) positive …","Determinant of Hermitian (or real symmetric) positive …","Cholesky decomposition of Hermitian (or real symmetric) …","Cholesky decomposition of Hermitian (or real symmetric) …","Inverse of Hermitian (or real symmetric) positive definite …","Inverse of Hermitian (or real symmetric) positive definite …","","","","","","","","Solve systems of linear equations with Hermitian (or real …","Upper/Lower specification for seveal usages","","","","Computes the Cholesky decomposition of the Hermitian (or …","Computes the Cholesky decomposition of the Hermitian (or …","Computes the Cholesky decomposition of the Hermitian (or …","Computes the determinant of the Hermitian (or real …","","Computes the determinant of the Hermitian (or real …","","<code>L</code> from the decomposition <code>A = L * L^H</code> or <code>U</code> from the …","Computes the Cholesky decomposition of the Hermitian (or …","Computes the Cholesky decomposition of the Hermitian (or …","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Returns <code>L</code> from the Cholesky decomposition <code>A = L * L^H</code>.","Returns <code>U</code> from the Cholesky decomposition <code>A = U^H * U</code>.","Computes the inverse of the Hermitian (or real symmetric) …","","Computes the inverse of the Hermitian (or real symmetric) …","","Computes the natural log of the determinant of the …","","Computes the natural log of the determinant of the …","","Solves a system of linear equations <code>A * x = b</code> with …","Solves a system of linear equations <code>A * x = b</code> with …","","Solves a system of linear equations <code>A * x = b</code> with …","","","","If this is <code>UPLO::Lower</code>, then <code>self.factor</code> is <code>L</code>. If this is …","","","","","","","","","","Vector as a Diagonal matrix","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Eigenvalue decomposition of general matrix reference","EigVec is the right eivenvector","","Calculate eigenvalues without eigenvectors","","Calculate eigenvalues with the right eigenvector","","","","","","","","Calculate eigenvalues without eigenvectors","Calculate eigenvalues without eigenvectors","Calculate eigenvalues without eigenvectors","","Eigenvalue decomposition of Hermite matrix reference","Eigenvalue decomposition of mutable reference of Hermite …","Eigenvalue decomposition of Hermite matrix","","","Calculate symmetric square-root matrix using <code>eigh</code>","Calculate symmetric square-root matrix using <code>eigh</code>","","","","","","","","","Strides of the array is not supported","LAPACK subroutine returns non-zero code","Master Error type of this crate","Memory is not aligned continously","Matrix is not square","Obj cannot be made from a (rows, cols) matrix","","Strides of the array is not supported","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Hermite conjugate matrix","construct matrix from diag","stack vectors into matrix horizontally","Generate random array","Random Hermite matrix","Random Hermite Positive-definite matrix","Generate random regular matrix","Generate random unitary matrix using QR decomposition","stack vectors into matrix vertically","","Inner Product","Inner product `(self.conjugate, rhs)","","","","Array type for coefficients to the current basis","","","Orthogonalize dependent vector without adding to Q, i.e. R …","H-matrix","","","Trait for creating orthogonal basis from iterator of arrays","Q-matrix","R-matrix","Skip dependent vector","Strategy for linearly dependent vectors appearing in …","Terminate iteration if dependent vector comes","Add new vector if the residual is larger than relative …","Arnoldi iteration","","","","","","","","","Calculate the coefficient to the current basis basis","","Decompose given vector into the span of current basis and …","Dimension of input array","Add new vector if the residual is larger than relative …","","","Returns the argument unchanged.","Returns the argument unchanged.","Get Q-matrix of generated basis","Householder reflection","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","check if the basis spans entire space","Number of cached basis","Modified Gram-Schmit orthogonalizer","","Online QR decomposition using arbitrary orthogonalizer","","","","","","","","","","","","","","Execute Arnoldi iteration as Rust iterator","Utility to execute Arnoldi iteration with Householder …","Utility to execute Arnoldi iteration with modified …","","","Iterate until convergent","Dimension of Krylov subspace","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Create an Arnoldi iterator from any linear operator <code>a</code>","","","","","","Iterative orthogonalizer using Householder reflection","","Take backward reflection <code>P = P_1 ... P_l</code>","","","Calc a reflactor <code>w</code> from a vector <code>x</code>","","","","","","","","Take forward reflection <code>P = P_l ... P_1</code>","Returns the argument unchanged.","","Online QR decomposition using Householder reflection","Calls <code>U::from(self)</code>.","","Create a new orthogonalizer","Take a reflection <code>P = I - 2ww^T</code>","","","","","","","Iterative orthogonalizer using modified Gram-Schmit …","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","Online QR decomposition using modified Gram-Schmit …","Create an empty orthogonalizer","","","","","","","","","","","","","","","","","","","Returns Ok iff the matrix is square (without computing the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","Transpose without changing memory representation","","","","","","","","","","","Result of a LeastSquares computation","Solve least squares for immutable references","Solve least squares for mutable references, overwriting …","Solve least squares for owned matrices","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Solve a least squares problem of the form <code>Ax = rhs</code> by …","Solve a least squares problem of the form <code>Ax = rhs</code> by …","Solve a least squares problem of the form <code>Ax = rhs</code> by …","The rank of the matrix A in <code>Ax = b</code>","If n &lt; m and rank(A) == n, the sum of squares If b is a (m …","The singular values of the matrix A in <code>Ax = b</code>","The solution vector or matrix <code>x</code> which is the best solution …","","","","","","","","The result of the eigensolver","","","","Truncated eigenproblem solver","Find largest or smallest eigenvalues","Truncated singular value decomposition","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Eigenvalue solver for large symmetric positive definite …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Define norm as a metric linear space (not as a matrix)","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","rename of <code>norm_l2</code>","L-1 norm","L-2 norm","maximum norm","normalize in L2 norm","","","","","","Abstracted linear operator as an action to vector (…","Apply operator out-place","Apply operator to matrix out-place","Apply operator to matrix with move","Apply operator to matrix in-place","Apply operator with move","Apply operator in-place","","","","","Operator norm using <code>*lange</code> LAPACK routines","the value of norm","To use Fortran LAPACK API in lapack-sys crate","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","the Frobenius norm of a matrix (square root of sum of …","the infinity norm of a matrix (maximum row sum)","the one norm of a matrix (maximum column sum)","","","","","","","","","","","QR decomposition for matrix reference","QR decomposition","QR decomposition for square matrix reference","QR decomposition for mutable reference of square matrix","QR decomposition for square matrix","","","","","","Upper/Lower specification for seveal usages","","","","","","","An interface for calculating determinants of matrix refs.","An interface for calculating determinants of matrices.","An interface for computing LU factorizations of matrix …","An interface for computing LU factorizations of matrices.","","An interface for inverting matrix refs.","An interface for inverting matrices.","Represents the LU factorization of a matrix <code>A</code> as <code>A = P*L*U</code>.","","","","","An interface for <em>estimating</em> the reciprocal condition …","An interface for <em>estimating</em> the reciprocal condition …","An interface for solving systems of linear equations.","","","To use Fortran LAPACK API in lapack-sys crate","","","","","","","","","Computes the determinant of the matrix.","Computes the determinant of the matrix.","Computes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …","Computes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the inverse of the matrix.","","Computes the inverse of the matrix.","","<em>Estimates</em> the reciprocal of the condition number of the …","","<em>Estimates</em> the reciprocal of the condition number of the …","","Computes the <code>(sign, natural_log)</code> of the determinant of the …","","Computes the <code>(sign, natural_log)</code> of the determinant of the …","","Solves a system of linear equations <code>A * x = b</code> where <code>A</code> is …","Solves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …","Solves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …","","Solves a system of linear equations <code>A^H * x = b</code> where <code>A</code> is …","Solves a system of linear equations <code>A * x = b</code> where <code>A</code> is …","","Solves a system of linear equations <code>A * x = b</code> where <code>A</code> is …","Solves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …","Solves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …","","Solves a system of linear equations <code>A^T * x = b</code> where <code>A</code> is …","","","","","","","","","","","Represents the Bunch–Kaufman factorization of a …","An interface for calculating determinants of Hermitian (or …","An interface for calculating determinants of Hermitian (or …","The element type of the matrix.","The element type of the matrix.","An interface for computing the Bunch–Kaufman …","An interface for computing the Bunch–Kaufman …","An interface for inverting Hermitian (or real symmetric) …","An interface for inverting Hermitian (or real symmetric) …","","","","","An interface for solving systems of Hermitian (or real …","Upper/Lower specification for seveal usages","","","To use Fortran LAPACK API in lapack-sys crate","","","","","","","Computes the determinant of the Hermitian (or real …","Computes the determinant of the factorized Hermitian (or …","Computes the determinant of the Hermitian (or real …","Computes the determinant of the factorized Hermitian (or …","Computes the Bunch–Kaufman factorization of a Hermitian …","Computes the Bunch–Kaufman factorization of a Hermitian …","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Computes the inverse of the Hermitian (or real symmetric) …","","Computes the inverse of the Hermitian (or real symmetric) …","","","Computes the <code>(sign, natural_log)</code> of the determinant of the …","Computes the <code>(sign, natural_log)</code> of the determinant of the …","Computes the <code>(sign, natural_log)</code> of the determinant of the …","Computes the <code>(sign, natural_log)</code> of the determinant of the …","Solves a system of linear equations <code>A * x = b</code> with …","Solves a system of linear equations <code>A * x = b</code> with …","","Solves a system of linear equations <code>A * x = b</code> with …","","","","","","","","","","","singular-value decomposition of matrix reference","singular-value decomposition for mutable reference of …","singular-value decomposition","","","","","","","","","","","","","All <em>m</em> columns of <em>U</em> and all <em>n</em> rows of <em>V</em>ᵀ.","No columns of <em>U</em> or rows of <em>V</em>ᵀ.","Singular-value decomposition of matrix (copying) by …","Singular-value decomposition of matrix reference by …","Singular-value decomposition of matrix by …","","","","The first min(<em>m</em>,<em>n</em>) columns of <em>U</em> and the first min(<em>m</em>,<em>n</em>) …","","","","Specifies how many of the columns of <em>U</em> and rows of <em>V</em>ᵀ …","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","solve a triangular system with upper triangular matrix","solve a triangular system with upper triangular matrix","solve a triangular system with upper triangular matrix","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","An interface for calculating determinants of tridiagonal …","An interface for making a Tridiagonal struct.","An interface for computing LU factorizations of …","An interface for computing LU factorizations of …","Represents the LU factorization of a tridiagonal matrix <code>A</code> …","An interface for <em>estimating</em> the reciprocal condition …","An interface for <em>estimating</em> the reciprocal condition …","","","Represents a tridiagonal matrix as 3 one-dimensional …","A tridiagonal matrix which consists of","","","","","","","","","(n) diagonal elements of matrix.","Computes the determinant of the matrix. Unlike <code>.det()</code> of …","","(n-1) sub-diagonal elements of matrix.","(n-1) super-diagonal elements of matrix.","(n-2) elements of the second super-diagonal of U.","","","Extract tridiagonal elements and layout of the raw matrix.","Computes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …","","Computes the LU factorization <code>A = P*L*U</code>, where <code>P</code> is a …","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The pivot indices that define the permutation matrix <code>P</code>.","layout of raw matrix","","","","<em>Estimates</em> the reciprocal of the condition number of the …","","<em>Estimates</em> the reciprocal of the condition number of the …","","Solves a system of linear equations <code>A^H * x = b</code> with …","","","","","Solves a system of linear equations <code>A^H * x = b</code> tridiagonal","","","Solves a system of linear equations <code>A^H * x = b</code> with …","","","","","Solves a system of linear equations <code>A^T * x = b</code> with …","","","","","Solves a system of linear equations <code>A^T * x = b</code> tridiagonal","","","Solves a system of linear equations <code>A^T * x = b</code> with …","","","","","Solves a system of linear equations <code>A * x = b</code> with …","","","","","Solves a system of linear equations <code>A * x = b</code> tridiagonal …","","","Solves a system of linear equations <code>A * x = b</code> with …","","","","","","","","","","","","","","","","Trait for primitive types which implements LAPACK …","","","Absolute value","","","","","As a complex number","","","","","","","Create a new complex number","Complex conjugate","","","","","","","Imaginary part","","","","","","","","Generate an random number from …","Real part","Create a new real number","","","","Sqaure of absolute value","","","",""],"i":[1,1,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,5,6,7,8,9,0,0,3,10,10,4,11,5,8,10,9,10,10,12,13,10,10,10,10,6,10,7,10,8,10,9,10,14,14,10,14,10,10,10,10,10,0,0,0,0,0,0,0,0,0,0,15,16,15,15,15,15,17,15,15,15,15,0,18,19,0,18,18,19,20,21,22,23,24,25,0,0,0,20,0,0,0,26,27,0,0,20,21,22,23,25,24,26,27,28,28,0,28,28,28,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,29,30,31,32,32,31,32,33,33,0,0,0,0,0,0,0,0,0,34,0,34,35,0,0,0,35,36,37,0,0,0,0,0,0,37,0,37,36,0,0,0,35,37,35,37,37,37,36,35,36,36,36,37,37,35,37,36,0,0,35,37,35,35,36,36,36,0,0,0,35,37,36,35,37,35,37,35,37,35,37,38,39,0,0,0,40,40,40,40,40,40,40,40,40,40,40,40,40,0,41,41,41,41,0,41,41,41,41,41,41,41,41,41,41,0,41,41,41,0,41,41,41,41,41,41,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,0,42,42,42,42,42,42,42,0,0,43,44,43,0,44,45,43,43,43,43,44,43,43,43,43,43,44,43,43,43,43,43,43,44,43,43,43,43,43,43,43,46,47,46,47,0,0,0,0,48,48,48,48,48,48,48,49,50,51,48,48,48,48,48,48,48,48,48,52,1,0,52,52,1,0,0,0,2,53,1,52,2,53,1,52,1,1,2,2,53,1,52,2,53,1,52,2,53,1,52,2,0,2,53,2,53,2,2,53,2,1,2,53,1,52,2,53,1,52,2,53,1,52,2,53,1,52,54,55,56,54,55,54,55,55,57,0,0,58,57,57,57,57,57,58,58,58,58,0,57,57,57,57,59,0,59,59,59,59,59,59,60,60,0,60,0,61,60,60,60,60,60,60,60,60,61,61,61,61,60,60,60,60,60,60,3,62,63,64,0,0,0,0,0,62,63,64,65,66,0,3,62,63,64,66,65,0,0,0,0,67,0,0,0,67,68,69,0,0,0,0,0,67,67,67,70,67,70,67,70,67,70,71,72,73,74,67,67,70,67,70,68,70,69,70,75,70,76,70,71,70,72,70,77,77,77,70,77,77,70,77,77,77,70,77,67,70,67,70,67,70,67,70,67,70,0,0,0,78,79,0,0,0,0,3,80,81,0,0,0,3,82,3,3,82,3,82,3,3,78,82,79,82,83,84,3,3,82,3,82,80,82,81,82,82,78,82,79,82,85,85,82,85,3,3,3,82,3,82,3,82,3,82,0,0,0,86,87,88,86,87,88,86,87,88,86,88,87,89,89,0,0,0,90,91,92,89,90,91,92,0,90,91,92,89,89,89,89,89,89,89,90,92,91,89,89,89,89,89,93,0,93,0,0,94,0,0,0,94,94,94,94,94,94,94,94,95,96,97,98,94,94,94,94,94,0,0,0,0,0,0,0,0,0,0,99,100,99,100,99,100,99,100,99,100,101,100,100,100,99,100,99,102,103,100,104,100,100,99,100,100,100,100,100,99,99,100,100,99,100,105,99,106,99,107,100,100,99,99,108,100,99,107,100,100,99,99,107,100,100,99,99,108,100,99,107,100,100,99,99,107,100,100,99,99,108,100,99,107,100,100,99,99,100,99,100,99,100,99,100,99,100,99,109,0,109,0,109,109,109,109,109,109,109,109,109,109,0,0,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["scalar",8],["scalar",8]]],[[["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3]]],[[["arraybase",3],["arraybase",3]]],[[["scalar",8],["scalar",8]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0],["uplo",4]],["result",6]],[[["",0],["uplo",4]],["result",6]],[[["uplo",4]],["result",6]],[[["",0]]],[[["choleskyfactorized",3]]],[[]],[[["choleskyfactorized",3]]],null,[[["",0],["uplo",4]],["result",6,[["choleskyfactorized",3]]]],[[["uplo",4]],["result",6,[["choleskyfactorized",3]]]],[[]],[[]],[[["choleskyfactorized",3]],["arraybase",3,[["ix2",6]]]],[[["choleskyfactorized",3]],["arraybase",3,[["ix2",6]]]],[[["",0]],["result",6]],[[["choleskyfactorized",3]],["result",6]],[[],["result",6]],[[["choleskyfactorized",3]],["result",6]],[[["",0]]],[[["choleskyfactorized",3]]],[[]],[[["choleskyfactorized",3]]],[[["",0],["arraybase",3]],["result",6,[["array1",6]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["choleskyfactorized",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],null,[[]],[[["arraybase",3,[["ix2",6]]]],["arraybase",3,[["ix1",6]]]],[[["array",6]],["arraybase",3]],[[["arraybase",3,[["ix1",6]]]],["arraybase",3,[["ix2",6]]]],[[["matrixlayout",4],["vec",3]],["result",6,[["arraybase",3,[["ix2",6]]]]]],[[["arraybase",3,[["ix1",6]]]],["arraybase",3,[["ix2",6]]]],[[["arraybase",3]],["arraybase",3]],[[["arraybase",3]],["result",6,[["arraybase",3]]]],null,null,null,[[["diagonal",3],["arraybase",3]]],[[["",0]],["diagonal",3,[["viewrepr",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[],["diagonal",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,[[["",0]],["result",6]],[[["",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["uplo",4]],["result",6]],[[["",0],["uplo",4]],["result",6]],[[["uplo",4]],["result",6]],[[["",0],["uplo",4]],["result",6]],[[["",0],["uplo",4]],["result",6]],[[["uplo",4]],["result",6]],[[["",0],["uplo",4]],["result",6]],[[["uplo",4]],["result",6]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["linalgerror",4],["formatter",3]],["result",6]],[[["linalgerror",4],["formatter",3]],["result",6]],[[["error",4]],["linalgerror",4]],[[["shapeerror",3]],["linalgerror",4]],[[]],[[]],[[["linalgerror",4]],["option",4,[["error",8]]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["arraybase",3]],["arraybase",3,[["ix2",6]]]],[[],["array2",6]],[[],["result",6,[["array",6,[["ix2",6]]]]]],[[],["arraybase",3]],[[["usize",0]],["arraybase",3,[["ix2",6]]]],[[["usize",0]],["arraybase",3,[["ix2",6]]]],[[["usize",0]],["array2",6]],[[["usize",0]],["array2",6]],[[],["result",6,[["array",6,[["ix2",6]]]]]],null,null,[[["",0],["arraybase",3]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["arraybase",3,[["ix1",6]]]],["appendresult",4]],null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["strategy",4]],["strategy",4]],[[["",0],["",0]]],[[["",0],["arraybase",3,[["ix1",6]]]],["coefficients",6]],[[["appendresult",4,[["scalar",8]]]],["coefficients",6]],[[["",0],["arraybase",3]],["coefficients",6]],[[["",0]],["usize",0]],[[["",0],["arraybase",3]],["appendresult",4]],[[["strategy",4],["strategy",4]],["bool",0]],[[["strategy",4],["formatter",3]],["result",6]],[[]],[[]],[[["",0]],["q",6]],null,null,[[]],[[]],[[["appendresult",4,[["scalar",8]]]],["coefficients",6,[["scalar",8]]]],[[["appendresult",4,[["scalar",8]]]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["bool",0]],[[["",0]],["usize",0]],null,null,[[["iterator",8],["orthogonalizer",8],["strategy",4]]],[[["appendresult",4,[["scalar",8]]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,[[["linearoperator",8],["arraybase",3,[["ix1",6]]]]],[[["linearoperator",8],["arraybase",3,[["ix1",6]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arnoldi",3]]],[[["arnoldi",3]],["usize",0]],[[]],[[]],[[]],[[["arraybase",3,[["ix1",6]]]],["arnoldi",3]],[[["arnoldi",3]],["option",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3,[["ix1",6]]]],["appendresult",4,[["",26,[["scalar",8],["lapack",8]]]]]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["arraybase",3]]],[[["householder",3,[["",26,[["clone",8],["scalar",8]]]]]],["householder",3,[["",26,[["clone",8],["scalar",8]]]]]],[[["",0],["",0]]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3,[["ix1",6]]]],["array1",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]],["array1",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]]],["usize",0]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]],["appendresult",4,[["",26,[["scalar",8],["lapack",8]]]]]],[[["householder",3,[["",26,[["debug",8],["scalar",8]]]]],["formatter",3]],["result",6]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]]],[[]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]]],["q",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[["iterator",8],["usize",0],["strategy",4]]],[[]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]]],["usize",0]],[[["usize",0]],["householder",3,[["",26,[["scalar",8],["lapack",8]]]]]],[[["arraybase",3],["arraybase",3]]],[[["",0]]],[[["householder",3,[["",26,[["scalar",8],["lapack",8]]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3,[["ix1",6]]]],["appendresult",4,[["",26,[["scalar",8],["lapack",8]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["mgs",3,[["",26,[["clone",8],["scalar",8]]]]]],["mgs",3,[["",26,[["clone",8],["scalar",8]]]]]],[[["",0],["",0]]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3,[["ix1",6]]]],["array1",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]],["array1",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]]],["usize",0]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]],["arraybase",3]],["appendresult",4,[["",26,[["scalar",8],["lapack",8]]]]]],[[["mgs",3,[["",26,[["debug",8],["scalar",8]]]]],["formatter",3]],["result",6]],[[]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]]],["q",6,[["",26,[["scalar",8],["lapack",8]]]]]],[[]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]]],["usize",0]],[[["iterator",8],["usize",0],["strategy",4]]],[[["usize",0]],["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]]],[[["",0]]],[[["mgs",3,[["",26,[["scalar",8],["lapack",8]]]]]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["",0]],[[["",0]],["",0]],[[["matrixlayout",4]],["matrixlayout",4]],[[["",0],["",0]]],[[["",0]],["result",6]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["matrixlayout",4]],["bool",0]],[[["",0]],["result",6,[["matrixlayout",4]]]],[[["matrixlayout",4]],["i32",0]],[[["matrixlayout",4]],["i32",0]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4],["i32",0],["i32",0]],["matrixlayout",4]],[[["matrixlayout",4],["matrixlayout",4]],["bool",0]],[[["matrixlayout",4]]],[[["",0]],["result",6,[["matrixlayout",4]]]],[[["matrixlayout",4]],["matrixlayout",4]],[[["",0]]],[[["matrixlayout",4]],["matrixlayout",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["leastsquaresresult",3,[["",26,[["clone",8],["scalar",8]]],["",26,[["clone",8],["dimension",8]]]]]],["leastsquaresresult",3,[["",26,[["clone",8],["scalar",8]]],["",26,[["clone",8],["dimension",8]]]]]],[[["",0],["",0]]],[[["leastsquaresresult",3,[["",26,[["debug",8],["scalar",8]]],["",26,[["debug",8],["dimension",8]]]]],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["arraybase",3]],["result",6,[["leastsquaresresult",3]]]],[[["",0],["arraybase",3]],["result",6,[["leastsquaresresult",3]]]],[[["arraybase",3]],["result",6,[["leastsquaresresult",3]]]],null,null,null,null,[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["order",4]],["order",4]],[[["",0],["",0]]],null,[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["usize",0]],["lobpcgresult",4,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["usize",0]],["result",6,[["truncatedsvdresult",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]]]],[[["order",4],["formatter",3]],["result",6]],[[["lobpcgresult",4,[["debug",8]]],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],["truncatedeigiterator",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["fn",8],["array2",6,[["",26,[["float",8],["scalar",8],["lapack",8],["scalaroperand",8],["partialord",8],["default",8]]]]],["fn",8],["option",4,[["array2",6,[["",26,[["float",8],["scalar",8],["lapack",8],["scalaroperand",8],["partialord",8],["default",8]]]]]]],["f32",0],["usize",0],["order",4]],["lobpcgresult",4,[["",26,[["float",8],["scalar",8],["lapack",8],["scalaroperand",8],["partialord",8],["default",8]]]]]],[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["usize",0]],["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["usize",0]],["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["array2",6,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["order",4]],["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["array2",6,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["order",4]],["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["array2",6,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["f32",0]],["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["f32",0]],["truncatedsvd",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]],["array2",6,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],["truncatedeig",3,[["",26,[["float",8],["scalar",8],["scalaroperand",8],["lapack",8],["partialord",8],["default",8]]]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[]],[[]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["arraybase",3,[["ix2",6]]],["normalizeaxis",4]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0],["arraybase",3]],["array1",6]],[[["",0],["arraybase",3]],["array2",6]],[[["",0],["arraybase",3,[["ix2",6]]]],["arraybase",3,[["ix2",6]]]],[[["",0],["arraybase",3]]],[[["",0],["arraybase",3,[["ix1",6]]]],["arraybase",3,[["ix1",6]]]],[[["",0],["arraybase",3]]],null,null,null,null,null,null,[[["normtype",4]],["i8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["normtype",4]],["normtype",4]],[[["",0],["",0]]],[[["normtype",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["",0],["normtype",4]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[["",0]]],[[["normtype",4]],["normtype",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["result",6]],[[],["result",6]],[[["",0]],["result",6]],[[["",0]],["result",6]],[[],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["transpose",4]],["i8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["transpose",4]],["transpose",4]],[[["lufactorized",3,[["",26,[["clone",8],["data",8],["rawdataclone",8]]]]]],["lufactorized",3,[["",26,[["clone",8],["data",8],["rawdataclone",8]]]]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0]],["result",6]],[[],["result",6]],[[["",0]],["result",6,[["lufactorized",3]]]],[[],["result",6,[["lufactorized",3]]]],[[["transpose",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["result",6]],[[["lufactorized",3]],["result",6,[["array2",6]]]],[[],["result",6]],[[["lufactorized",3]],["result",6,[["arraybase",3,[["ix2",6]]]]]],[[["",0]],["result",6]],[[["lufactorized",3]],["result",6]],[[],["result",6]],[[["lufactorized",3]],["result",6]],[[["",0]],["result",6]],[[["lufactorized",3]],["result",6]],[[],["result",6]],[[["lufactorized",3]],["result",6]],[[["",0],["arraybase",3]],["result",6,[["array1",6]]]],[[["",0],["arraybase",3]],["result",6,[["array1",6]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorized",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorized",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["array1",6]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorized",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["uplo",4]],["i8",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["uplo",4]],["uplo",4]],[[["",0],["",0]]],[[["",0]],["result",6]],[[["bkfactorized",3]]],[[],["result",6]],[[["bkfactorized",3]]],[[["",0]],["result",6,[["bkfactorized",3]]]],[[],["result",6,[["bkfactorized",3]]]],[[["uplo",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[]],[[]],[[["",0]],["result",6]],[[["bkfactorized",3]],["result",6]],[[],["result",6]],[[["bkfactorized",3]],["result",6,[["arraybase",3,[["ix2",6]]]]]],null,[[["",0]],["result",6]],[[["bkfactorized",3]]],[[],["result",6]],[[["bkfactorized",3]]],[[["",0],["arraybase",3]],["result",6,[["array1",6]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["bkfactorized",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["uplo",4]],["uplo",4]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["bool",0],["bool",0]],["result",6]],[[["",0],["bool",0],["bool",0]],["result",6]],[[["bool",0],["bool",0]],["result",6]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["uvtflag",4]],["uvtflag",4]],[[["",0],["",0]]],[[["uvtflag",4],["uvtflag",4]],["bool",0]],[[]],[[]],[[["",0],["uvtflag",4]],["result",6]],[[["",0],["uvtflag",4]],["result",6]],[[["uvtflag",4]],["result",6]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,[[["",0]],["result",6]],null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["diag",4]],["diag",4]],[[["",0],["",0]]],[[["diag",4],["formatter",3]],["result",4,[["error",3]]]],[[]],[[]],[[["uplo",4]]],[[["",0],["uplo",4],["diag",4],["arraybase",3]],["result",6,[["array",6]]]],[[["",0],["uplo",4],["diag",4],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["uplo",4],["diag",4],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["tridiagonal",3]],["tridiagonal",3]],[[["lufactorizedtridiagonal",3]],["lufactorizedtridiagonal",3]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0]],["result",6]],[[["tridiagonal",3]],["result",6]],null,null,null,[[["tridiagonal",3],["tridiagonal",3]],["bool",0]],[[["lufactorizedtridiagonal",3],["lufactorizedtridiagonal",3]],["bool",0]],[[["",0]],["result",6,[["tridiagonal",3]]]],[[["",0]],["result",6,[["lufactorizedtridiagonal",3]]]],[[["tridiagonal",3]],["result",6,[["lufactorizedtridiagonal",3]]]],[[],["result",6,[["lufactorizedtridiagonal",3]]]],[[["tridiagonal",3]],["result",6,[["lufactorizedtridiagonal",3]]]],[[]],[[]],[[["tridiagonal",3]],["",0]],[[["tridiagonal",3]],["",0]],[[["tridiagonal",3]],["",0]],[[["tridiagonal",3]],["",0]],[[]],[[]],null,null,[[["tridiagonal",3],["tridiagonal",3]],["bool",0]],[[["lufactorizedtridiagonal",3],["lufactorizedtridiagonal",3]],["bool",0]],[[["tridiagonal",3],["normtype",4]],["result",6]],[[["",0]],["result",6]],[[["lufactorizedtridiagonal",3]],["result",6]],[[],["result",6]],[[["lufactorizedtridiagonal",3]],["result",6]],[[["",0],["arraybase",3]],["result",6,[["array",6]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8]]]],["result",6,[["arraybase",3,[["datamut",8]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["array",6]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8]]]],["result",6,[["arraybase",3,[["datamut",8]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["array",6]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["array",6,[["ix2",6]]]]]],[[["",0],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["tridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["lufactorizedtridiagonal",3],["arraybase",3]],["result",6,[["arraybase",3]]]],[[["",0],["arraybase",3,[["datamut",8]]]],["result",6,[["arraybase",3,[["datamut",8]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["tridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix1",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix1",6]]]]]],[[["lufactorizedtridiagonal",3],["arraybase",3,[["datamut",8],["ix2",6]]]],["result",6,[["arraybase",3,[["datamut",8],["ix2",6]]]]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],null,null,[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",0]]],[[]],[[["",0]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]]],"p":[[4,"TruncatedOrder"],[3,"TruncatedEig"],[4,"UPLO"],[8,"Cholesky"],[8,"CholeskyInto"],[8,"InverseC"],[8,"InverseCInto"],[8,"DeterminantC"],[8,"DeterminantCInto"],[3,"CholeskyFactorized"],[8,"CholeskyInplace"],[8,"FactorizeC"],[8,"FactorizeCInto"],[8,"SolveC"],[3,"Diagonal"],[8,"AsDiagonal"],[8,"IntoDiagonal"],[8,"Eig"],[8,"EigVals"],[8,"Eigh"],[8,"EighInplace"],[8,"EighInto"],[8,"EigValsh"],[8,"EigValshInto"],[8,"EigValshInplace"],[8,"SymmetricSqrt"],[8,"SymmetricSqrtInto"],[4,"LinalgError"],[13,"Lapack"],[13,"Shape"],[13,"NotSquare"],[13,"NotStandardShape"],[13,"InvalidStride"],[8,"InnerProduct"],[4,"AppendResult"],[8,"Orthogonalizer"],[4,"Strategy"],[13,"Added"],[13,"Dependent"],[3,"Arnoldi"],[3,"Householder"],[3,"MGS"],[4,"MatrixLayout"],[8,"AllocatedArray"],[8,"AllocatedArrayMut"],[13,"F"],[13,"C"],[3,"LeastSquaresResult"],[8,"LeastSquaresSvd"],[8,"LeastSquaresSvdInPlace"],[8,"LeastSquaresSvdInto"],[4,"LobpcgResult"],[3,"TruncatedSvd"],[13,"Ok"],[13,"Err"],[13,"NoResult"],[4,"NormalizeAxis"],[8,"Norm"],[8,"LinearOperator"],[4,"NormType"],[8,"OperationNorm"],[8,"QR"],[8,"QRInto"],[8,"QRSquare"],[8,"QRSquareInto"],[8,"QRSquareInplace"],[4,"Transpose"],[8,"Inverse"],[8,"InverseInto"],[3,"LUFactorized"],[8,"Determinant"],[8,"DeterminantInto"],[8,"Factorize"],[8,"FactorizeInto"],[8,"ReciprocalConditionNum"],[8,"ReciprocalConditionNumInto"],[8,"Solve"],[8,"DeterminantH"],[8,"DeterminantHInto"],[8,"InverseH"],[8,"InverseHInto"],[3,"BKFactorized"],[8,"FactorizeH"],[8,"FactorizeHInto"],[8,"SolveH"],[8,"SVD"],[8,"SVDInto"],[8,"SVDInplace"],[4,"UVTFlag"],[8,"SVDDC"],[8,"SVDDCInto"],[8,"SVDDCInplace"],[8,"Trace"],[4,"Diag"],[8,"IntoTriangular"],[8,"SolveTriangular"],[8,"SolveTriangularInplace"],[8,"SolveTriangularInto"],[3,"LUFactorizedTridiagonal"],[3,"Tridiagonal"],[8,"DeterminantTridiagonal"],[8,"ExtractTridiagonal"],[8,"FactorizeTridiagonal"],[8,"FactorizeTridiagonalInto"],[8,"ReciprocalConditionNumTridiagonal"],[8,"ReciprocalConditionNumTridiagonalInto"],[8,"SolveTridiagonal"],[8,"SolveTridiagonalInplace"],[8,"Scalar"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
